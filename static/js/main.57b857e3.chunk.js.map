{"version":3,"sources":["components/Home/logo.svg","components/Actions/ActionType.js","components/Home/Home.js","components/Actions/ActionCreator.js","components/Navbar/Navbar.js","components/Footer/Footer.js","App.js","serviceWorker.js","components/Reducer/Appreducer.js","store.js","index.js"],"names":["module","exports","ACTION_TYPE","Home","clickHandler","event","target","name","props","click","store","count","className","src","logo","alt","onClick","this","Component","connect","state","dispatch","new_count","type","payload","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","App","Boolean","window","location","hostname","match","initState","Appreducer","action","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,uQCA9BC,G,MAAc,S,ICMrBC,E,2MAEFC,aAAe,SAACC,GACc,QAApBA,EAAMC,OAAOC,KACZ,EAAKC,MAAMC,MAAM,EAAKD,MAAME,MAAMC,MAAM,GAGzC,EAAKH,MAAMC,MAAM,EAAKD,MAAME,MAAMC,MAAM,I,wEAOlD,OACU,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGC,8BACI,4BAAQH,UAAU,0CAA0CI,QAASC,KAAKb,aAAcG,KAAK,OAA7F,OACA,4BAAQK,UAAU,2CAAlB,SAAmEK,KAAKT,MAAME,MAAMC,OACrF,4BAAQC,UAAU,0CAA0CI,QAASC,KAAKb,aAAcG,KAAK,OAA7F,c,GAxBHW,aAiDJC,eAfS,SAACC,GAErB,MAAO,CACHV,MAAMU,MAIa,SAACC,GAE1B,MAAO,CACHZ,MAAM,SAACa,GACHD,EChDE,CACNE,KAAKrB,EACLsB,QAAQ,CAACb,MD8CUW,SAIVH,CAA4ChB,GEpDtCsB,G,uLAGb,OAEI,yBAAKb,UAAU,kDACf,uBAAGA,UAAU,eAAec,KAAK,KAAjC,WACA,4BAAQd,UAAU,iBAAiBW,KAAK,SAASI,cAAY,WAAWC,cAAY,cAAcC,gBAAc,aAAaC,gBAAc,QAAQC,aAAW,qBAC5J,0BAAMnB,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BoB,GAAG,cAC3C,wBAAIpB,UAAU,sBACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,wBAAwBc,KAAK,KAA1C,SAAoD,0BAAMd,UAAU,WAAhB,sB,GAblCM,cCAfe,G,uLAEb,OACI,6BACI,yBAAKrB,UAAU,kBACX,yBAAKA,UAAU,aACP,yBAAKA,UAAU,oBACX,0F,GAPIM,cCYrBgB,MAVf,WACE,OACI,6BACK,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCESC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4kBChBN,IAAMC,EAAY,CACjB7B,MAAM,GAYQ8B,EATI,WAA4B,IAA3BrB,EAA0B,uDAApBoB,EAAUE,EAAU,uCAEjC,OAAGA,EAAOnB,OAAOrB,EACP,EAAP,GAAWkB,EAAX,GAAoBsB,EAAOlB,SAGvB,EAAP,GAAWJ,ICVTuB,cACCF,GCKhBG,IAASC,OAAO,kBAAC,IAAD,CAAUnC,MAAOA,GAAO,kBAAC,EAAD,OAAoBoC,SAASC,eAAe,SHyH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.57b857e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const ACTION_TYPE = \"click\";","import React,{Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport {connect} from 'react-redux'\r\nimport './Home.css';\r\nimport {click} from '../Actions/ActionCreator'\r\n\r\nclass Home extends Component{\r\n\r\n    clickHandler = (event)=>{\r\n           if(event.target.name===\"inc\"){\r\n               this.props.click(this.props.store.count+1);\r\n             }\r\n           else{\r\n              this.props.click(this.props.store.count-1);\r\n           }\r\n\r\n    }\r\n\r\n   render(){\r\n\r\n    return (\r\n              <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                  <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n                  <p>\r\n                    Edit <code>src/App.js</code> and save to reload.\r\n                  </p>\r\n                   <span>\r\n                       <button className=\"btn badge badge-pill badge-primary mx-1\" onClick={this.clickHandler} name=\"inc\">inc</button>\r\n                       <button className=\"btn badge badge-pill badge-primary mx-1\">count {this.props.store.count}</button>\r\n                      <button className=\"btn badge badge-pill badge-primary mx-1\" onClick={this.clickHandler} name=\"dec\">dec</button>\r\n                   </span>\r\n                </header>\r\n              </div>\r\n         );\r\n\r\n   }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state)=>{\r\n\r\n    return {\r\n        store:state\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n\r\n  return {\r\n      click:(new_count)=>{\r\n          dispatch(click(new_count))\r\n      }\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home);\r\n","import {ACTION_TYPE} from './ActionType';\r\n\r\nexport function click(arg) {\r\n\t    return {\r\n\t    \ttype:ACTION_TYPE,\r\n\t    \tpayload:{count:arg}\r\n\t    }\r\n}","import React, { Component } from 'react'\r\nimport './Navbar.css'\r\n\r\nexport default class Navbar extends Component {\r\n\r\n    render() {\r\n        return (\r\n                \r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n            <a className=\"navbar-brand\" href=\"#\">Project</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarText\">\r\n              <ul className=\"navbar-nav mr-auto\">\r\n                <li className=\"nav-item active\">\r\n                  <a className=\"nav-link navbar-brand\" href=\"#\"> Home <span className=\"sr-only\">(current)</span></a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </nav>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport './Footer.css'\r\n\r\nexport default class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"col-sm-12 last\">\r\n                    <div className=\"container\">\r\n                            <div className=\"col-sm-12 footer\">\r\n                                <span>&copy; 2019 No one care about this copyright line.</span>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Home from './components/Home/Home';\nimport Navbar from './components/Navbar/Navbar';\nimport Footer from  './components/Footer/Footer';\n\nfunction App() {\n  return (\n      <div>\n           <Navbar />\n           <Home/>\n           <Footer />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {ACTION_TYPE} from '../Actions/ActionType'\r\n\r\nconst initState = {\r\n\tcount:0\r\n}\r\n\r\nconst Appreducer = (state=initState,action) =>{\r\n             \r\n             if(action.type===ACTION_TYPE){\r\n             \t  return {...state,...action.payload};\r\n             }\r\n\r\n             return {...state};\r\n}\r\n\r\nexport default Appreducer;","import {createStore} from 'redux'\r\nimport Appreducer from './components/Reducer/Appreducer'\r\nexport default createStore(\r\n                Appreducer\r\n            );","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store'\nimport {Provider} from 'react-redux'\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}